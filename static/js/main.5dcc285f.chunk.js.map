{"version":3,"sources":["logo.svg","components/navbar/Navbar.js","components/instructions/Instructions.js","components/body/Body.js","components/footer/Footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","Navbar","bg","variant","fixed","Container","Brand","href","Text","Instructions","fluid","className","Body","Row","Col","xs","md","Image","src","thumbnail","Footer","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6JAAAA,EAAOC,QAAU,IAA0B,kC,yJCmB5BC,EAdA,WACb,OACE,kBAACC,EAAA,EAAD,CAAQC,GAAG,OAAOC,QAAQ,OAAOC,MAAM,OACrC,kBAACC,EAAA,EAAD,KACE,kBAACJ,EAAA,EAAOK,MAAR,CAAcC,KAAK,KAAnB,eAGA,kBAACN,EAAA,EAAOO,KAAR,iCACA,kBAACP,EAAA,EAAOO,KAAR,mCCDOC,EATM,WACnB,OACI,kBAACJ,EAAA,EAAD,CAAWK,OAAK,EAACC,UAAU,gCACzB,4CACA,yG,+BCuBOC,EAvBF,WACX,OACE,kBAACP,EAAA,EAAD,KACE,kBAACQ,EAAA,EAAD,CAAKF,UAAU,iCACb,kBAACG,EAAA,EAAD,CAAKC,GAAI,GAAIC,GAAI,GACf,kBAACC,EAAA,EAAD,CAAOC,IAAI,kCAAkCC,WAAS,EAACR,UAAU,QACjE,kBAACM,EAAA,EAAD,CAAOC,IAAI,kCAAkCC,WAAS,EAACR,UAAU,QACjE,kBAACM,EAAA,EAAD,CAAOC,IAAI,kCAAkCC,WAAS,EAACR,UAAU,QACjE,kBAACM,EAAA,EAAD,CAAOC,IAAI,kCAAkCC,WAAS,EAACR,UAAU,QACjE,kBAACM,EAAA,EAAD,CAAOC,IAAI,kCAAkCC,WAAS,EAACR,UAAU,QACjE,kBAACM,EAAA,EAAD,CAAOC,IAAI,kCAAkCC,WAAS,EAACR,UAAU,QACjE,kBAACM,EAAA,EAAD,CAAOC,IAAI,kCAAkCC,WAAS,EAACR,UAAU,QACjE,kBAACM,EAAA,EAAD,CAAOC,IAAI,kCAAkCC,WAAS,EAACR,UAAU,QACjE,kBAACM,EAAA,EAAD,CAAOC,IAAI,kCAAkCC,WAAS,EAACR,UAAU,QACjE,kBAACM,EAAA,EAAD,CAAOC,IAAI,kCAAkCC,WAAS,EAACR,UAAU,QACjE,kBAACM,EAAA,EAAD,CAAOC,IAAI,kCAAkCC,WAAS,EAACR,UAAU,QACjE,kBAACM,EAAA,EAAD,CAAOC,IAAI,kCAAkCC,WAAS,EAACR,UAAU,YCf5DS,EANA,WACb,OACE,uBAAGT,UAAU,gDAAb,0E,MCiBWU,MAXf,WACE,OACE,yBAAKV,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCJcW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.5dcc285f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport { Navbar } from 'react-bootstrap';\r\nimport { Nav } from 'react-bootstrap';\r\nimport { Container } from 'react-bootstrap';\r\n\r\nconst Header = () => {\r\n  return (\r\n    <Navbar bg=\"dark\" variant=\"dark\" fixed=\"top\">\r\n      <Container>\r\n        <Navbar.Brand href=\"/\">\r\n          Clicky Game\r\n        </Navbar.Brand>\r\n        <Navbar.Text>Click an image to begin!</Navbar.Text>\r\n        <Navbar.Text>Score: 0 | Top Score: 0</Navbar.Text>\r\n      </Container>\r\n    </Navbar>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n\r\n\r\n","import React from 'react';\r\nimport { Container } from 'react-bootstrap';\r\n\r\nconst Instructions = () => {\r\n  return (\r\n      <Container fluid className=\"m-0 text-center bg-light p-2\">\r\n        <h5>Clicky Game!</h5>\r\n        <p>Click on an image to earn points, but don't click on any more than once!</p>\r\n      </Container>\r\n  );\r\n}\r\n\r\nexport default Instructions;","import React from 'react';\r\nimport './Body.css';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Image from 'react-bootstrap/Image';\r\n\r\nconst Body = () => {\r\n  return (\r\n    <Container>\r\n      <Row className=\"d-flex justify-content-center\">\r\n        <Col xs={12} md={8}>\r\n          <Image src=\"https://via.placeholder.com/150\" thumbnail className=\"m-2\" />\r\n          <Image src=\"https://via.placeholder.com/150\" thumbnail className=\"m-2\" />\r\n          <Image src=\"https://via.placeholder.com/150\" thumbnail className=\"m-2\" />\r\n          <Image src=\"https://via.placeholder.com/150\" thumbnail className=\"m-2\" />\r\n          <Image src=\"https://via.placeholder.com/150\" thumbnail className=\"m-2\" />\r\n          <Image src=\"https://via.placeholder.com/150\" thumbnail className=\"m-2\" />\r\n          <Image src=\"https://via.placeholder.com/150\" thumbnail className=\"m-2\" />\r\n          <Image src=\"https://via.placeholder.com/150\" thumbnail className=\"m-2\" />\r\n          <Image src=\"https://via.placeholder.com/150\" thumbnail className=\"m-2\" />\r\n          <Image src=\"https://via.placeholder.com/150\" thumbnail className=\"m-2\" />\r\n          <Image src=\"https://via.placeholder.com/150\" thumbnail className=\"m-2\" />\r\n          <Image src=\"https://via.placeholder.com/150\" thumbnail className=\"m-2\" />\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Body;","import React from 'react';\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <p className=\"small text-center bg-dark m-0 p-3 text-light\">Made for University of Arizona Coding Bootcamp, Week-19, January 2020</p>\r\n  );\r\n}\r\n\r\nexport default Footer;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Header from './components/navbar/Navbar';\nimport Instructions from './components/instructions/Instructions';\nimport Body from './components/body/Body';\nimport Footer from './components/footer/Footer';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Instructions />\n      <Body />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}