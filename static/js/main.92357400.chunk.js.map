{"version":3,"sources":["components/instructions/Instructions.js","components/body/Body.js","components/footer/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Instructions","props","Container","fluid","className","userMessage","userScore","userTopScore","Card","Image","src","link","thumbnail","id","onClick","handleCount","Body","state","count","score","images","beenClicked","message","shake","console","log","indexOf","push","setState","rowClass","this","setTimeout","Row","Col","xs","md","sort","Math","random","map","image","React","Component","Footer","Navbar","fixed","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uuBAeeA,G,MAXM,SAACC,GACpB,OACI,kBAACC,EAAA,EAAD,CAAWC,OAAK,EAACC,UAAU,uBACzB,wBAAIA,UAAU,0DAAd,gBACA,uBAAGA,UAAU,aAAb,4EACA,4BAAKH,EAAMI,aAAe,4BAC1B,sCAAYJ,EAAMK,WAAa,EAA/B,iBAAgDL,EAAMM,cAAgB,MCiF9E,SAASC,EAAKP,GACZ,OACE,kBAACQ,EAAA,EAAD,CAAOC,IAAK,UAAYT,EAAMU,KAAMC,WAAS,EAACR,UAAU,oBAAoBS,GAAIZ,EAAMY,GAAIC,QAAS,kBAAMb,EAAMc,YAAYd,EAAMY,OAKtHG,M,2MAxFbC,MAAQ,CACNC,MAAO,EACPC,MAAO,EACPC,OAAQA,EACRC,YAAa,GACbC,QAAS,GACTC,OAAO,G,EAGTR,YAAc,SAACF,GAEbW,QAAQC,IAAIZ,GAEZ,IAAIQ,EAAW,YAAO,EAAKJ,MAAMI,cAEA,IAA7BA,EAAYK,QAAQb,IAEtBQ,EAAYM,KAAKd,GAEb,EAAKI,MAAMC,MAAQ,EAAKD,MAAME,MAChC,EAAKS,SACH,CACEV,MAAO,EAAKD,MAAMC,MAAQ,EAC1BG,cACAC,QAAS,2BAIb,EAAKM,SACH,CACEV,MAAO,EAAKD,MAAMC,MAAQ,EAC1BG,cACAF,MAAO,EAAKF,MAAME,MAAQ,EAC1BG,QAAS,6BAMfE,QAAQC,IAAI,aACZ,EAAKG,SAAS,CAAEV,MAAO,EAAGG,YAAa,GAAIF,MAAO,EAAKF,MAAME,MAAOG,QAAS,2BAA4BC,OAAO,M,wEAK1G,IAAD,OAEHM,EAAW,4CASf,OAPIC,KAAKb,MAAMM,OACbM,GAAY,SACZE,YAAW,kBAAM,EAAKH,SAAS,CAAEL,OAAO,MAAU,MAElDM,EAAW,oDAIX,6BACE,kBAAC,EAAD,CAAcvB,UAAWwB,KAAKb,MAAMC,MAAOX,aAAcuB,KAAKb,MAAME,MAAOd,YAAayB,KAAKb,MAAMK,UACnG,kBAACpB,EAAA,EAAD,KACE,kBAAC8B,EAAA,EAAD,CAAK5B,UAAWyB,GACd,kBAACI,EAAA,EAAD,CAAKC,GAAI,GAAIC,GAAI,GAEbL,KAAKb,MAAMG,OACRgB,MAAK,kBAAMC,KAAKC,SAAW,MAC3BC,KAAI,SAACC,GAAD,OACH,kBAAChC,EAAD,CACEG,KAAM6B,EAAM7B,KACZE,GAAI2B,EAAM3B,GACVE,YAAa,EAAKA,yB,GAtErB0B,IAAMC,W,gBCKVC,EAVA,WACb,OACE,kBAACC,EAAA,EAAD,CAAQC,MAAM,0CACZ,uBAAGzC,UAAU,wCAAb,2ECWS0C,G,uLATX,OACE,yBAAK1C,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GANUqC,IAAMC,YCMJK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.92357400.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Instructions.css';\r\nimport { Container } from 'react-bootstrap';\r\n\r\nconst Instructions = (props) => {\r\n  return (\r\n      <Container fluid className=\"m-0 text-center p-2\">\r\n        <h2 className=\"mt-2 font text-uppercase font-weight-bold instructions\">Clicky Game!</h2>\r\n        <p className=\"text-dark\">Click on an image to earn points, but don't click on any more than once!</p>\r\n        <h5>{props.userMessage || \"Click an image to begin!\"}</h5>\r\n        <h6>Score: {props.userScore || 0} | Top Score: {props.userTopScore || 0}</h6>\r\n      </Container>\r\n  );\r\n}\r\n\r\nexport default Instructions;","import React from 'react';\r\nimport './Body.css';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Image from 'react-bootstrap/Image';\r\nimport images from '../../images.json';\r\nimport Instructions from '../instructions/Instructions';\r\n\r\nclass Body extends React.Component {\r\n  state = {\r\n    count: 0,\r\n    score: 0,\r\n    images: images,\r\n    beenClicked: [],\r\n    message: \"\",\r\n    shake: false\r\n  };\r\n\r\n  handleCount = (id) => {\r\n\r\n    console.log(id);\r\n\r\n    let beenClicked = [...this.state.beenClicked];\r\n\r\n    if (beenClicked.indexOf(id) === -1) {\r\n\r\n      beenClicked.push(id);\r\n\r\n      if (this.state.count < this.state.score) {\r\n        this.setState(\r\n          {\r\n            count: this.state.count + 1,\r\n            beenClicked,\r\n            message: \"You guessed correctly!\"\r\n          }\r\n        );\r\n      } else {\r\n        this.setState(\r\n          {\r\n            count: this.state.count + 1,\r\n            beenClicked,\r\n            score: this.state.score + 1,\r\n            message: \"You guessed correctly!\"\r\n          }\r\n        );\r\n      }\r\n\r\n    } else {\r\n      console.log(\"game over\");\r\n      this.setState({ count: 0, beenClicked: [], score: this.state.score, message: \"You guessed incorrectly!\", shake: true });\r\n    }\r\n\r\n  };\r\n\r\n  render() {\r\n\r\n    let rowClass = \"d-flex justify-content-center text-center\";\r\n\r\n    if (this.state.shake) {\r\n      rowClass += \" shake\";\r\n      setTimeout(() => this.setState({ shake: false }), 1000)\r\n    } else {\r\n      rowClass = \"d-flex justify-content-center text-center noshake\";\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <Instructions userScore={this.state.count} userTopScore={this.state.score} userMessage={this.state.message} />\r\n        <Container>\r\n          <Row className={rowClass}>\r\n            <Col xs={12} md={8}>\r\n              {\r\n                this.state.images\r\n                  .sort(() => Math.random() - 0.5)\r\n                  .map((image) =>\r\n                    <Card\r\n                      link={image.link}\r\n                      id={image.id}\r\n                      handleCount={this.handleCount}\r\n                    />\r\n                  )\r\n              }\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </div >\r\n    );\r\n  };\r\n}\r\n\r\nfunction Card(props) {\r\n  return (\r\n    <Image src={'images/' + props.link} thumbnail className=\"m-1 m-md-2 m-lg-3\" id={props.id} onClick={() => props.handleCount(props.id)} />\r\n  )\r\n}\r\n\r\n\r\nexport default Body;","import React from 'react';\r\nimport './Footer.css';\r\nimport { Navbar } from 'react-bootstrap';\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <Navbar fixed=\"bottom justify-content-center bg-black\" >\r\n      <p className=\"small text-center text-light m-0 p-2\">\r\n        Made for University of Arizona Coding Bootcamp, Week-19, January 2020\r\n      </p>\r\n    </Navbar>\r\n  );\r\n}\r\n\r\nexport default Footer;","import React from 'react';\nimport './App.css';\nimport Body from './components/body/Body';\nimport Footer from './components/footer/Footer';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nclass App extends React.Component {\n  \n  render() {\n    return (\n      <div className=\"App\">\n        <Body />\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}